// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// resultantCPP1
Rcpp::CharacterVector resultantCPP1(Rcpp::IntegerVector PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerVector PowersG, Rcpp::CharacterVector CoeffsG);
RcppExport SEXP _resultant_resultantCPP1(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    rcpp_result_gen = Rcpp::wrap(resultantCPP1(PowersF, CoeffsF, PowersG, CoeffsG));
    return rcpp_result_gen;
END_RCPP
}
// resultantCPP2
Rcpp::CharacterVector resultantCPP2(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool permute);
RcppExport SEXP _resultant_resultantCPP2(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permuteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type permute(permuteSEXP);
    rcpp_result_gen = Rcpp::wrap(resultantCPP2(PowersF, CoeffsF, PowersG, CoeffsG, permute));
    return rcpp_result_gen;
END_RCPP
}
// resultantCPP3
Rcpp::List resultantCPP3(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_resultantCPP3(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(resultantCPP3(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// resultantCPP4
Rcpp::List resultantCPP4(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_resultantCPP4(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(resultantCPP4(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// resultantCPP5
Rcpp::List resultantCPP5(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_resultantCPP5(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(resultantCPP5(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// resultantCPP6
Rcpp::List resultantCPP6(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_resultantCPP6(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(resultantCPP6(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// resultantCPP7
Rcpp::List resultantCPP7(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_resultantCPP7(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(resultantCPP7(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// resultantCPP8
Rcpp::List resultantCPP8(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_resultantCPP8(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(resultantCPP8(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// resultantCPP9
Rcpp::List resultantCPP9(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_resultantCPP9(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(resultantCPP9(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// subresultantsCPP1
Rcpp::CharacterVector subresultantsCPP1(Rcpp::IntegerVector PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerVector PowersG, Rcpp::CharacterVector CoeffsG);
RcppExport SEXP _resultant_subresultantsCPP1(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    rcpp_result_gen = Rcpp::wrap(subresultantsCPP1(PowersF, CoeffsF, PowersG, CoeffsG));
    return rcpp_result_gen;
END_RCPP
}
// subresultantsCPP2
Rcpp::List subresultantsCPP2(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool permute);
RcppExport SEXP _resultant_subresultantsCPP2(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permuteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type permute(permuteSEXP);
    rcpp_result_gen = Rcpp::wrap(subresultantsCPP2(PowersF, CoeffsF, PowersG, CoeffsG, permute));
    return rcpp_result_gen;
END_RCPP
}
// subresultantsCPP3
Rcpp::List subresultantsCPP3(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_subresultantsCPP3(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(subresultantsCPP3(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// subresultantsCPP4
Rcpp::List subresultantsCPP4(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_subresultantsCPP4(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(subresultantsCPP4(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// subresultantsCPP5
Rcpp::List subresultantsCPP5(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_subresultantsCPP5(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(subresultantsCPP5(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// subresultantsCPP6
Rcpp::List subresultantsCPP6(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_subresultantsCPP6(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(subresultantsCPP6(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// subresultantsCPP7
Rcpp::List subresultantsCPP7(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_subresultantsCPP7(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(subresultantsCPP7(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// subresultantsCPP8
Rcpp::List subresultantsCPP8(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_subresultantsCPP8(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(subresultantsCPP8(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// subresultantsCPP9
Rcpp::List subresultantsCPP9(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_subresultantsCPP9(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(subresultantsCPP9(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// gcdCPP1
Rcpp::List gcdCPP1(Rcpp::IntegerVector PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerVector PowersG, Rcpp::CharacterVector CoeffsG, bool UTCF);
RcppExport SEXP _resultant_gcdCPP1(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP UTCFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type UTCF(UTCFSEXP);
    rcpp_result_gen = Rcpp::wrap(gcdCPP1(PowersF, CoeffsF, PowersG, CoeffsG, UTCF));
    return rcpp_result_gen;
END_RCPP
}
// gcdCPP2
Rcpp::List gcdCPP2(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool UTCF);
RcppExport SEXP _resultant_gcdCPP2(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP UTCFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type UTCF(UTCFSEXP);
    rcpp_result_gen = Rcpp::wrap(gcdCPP2(PowersF, CoeffsF, PowersG, CoeffsG, UTCF));
    return rcpp_result_gen;
END_RCPP
}
// gcdCPP3
Rcpp::List gcdCPP3(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool UTCF);
RcppExport SEXP _resultant_gcdCPP3(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP UTCFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type UTCF(UTCFSEXP);
    rcpp_result_gen = Rcpp::wrap(gcdCPP3(PowersF, CoeffsF, PowersG, CoeffsG, UTCF));
    return rcpp_result_gen;
END_RCPP
}
// gcdCPP4
Rcpp::List gcdCPP4(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool UTCF);
RcppExport SEXP _resultant_gcdCPP4(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP UTCFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type UTCF(UTCFSEXP);
    rcpp_result_gen = Rcpp::wrap(gcdCPP4(PowersF, CoeffsF, PowersG, CoeffsG, UTCF));
    return rcpp_result_gen;
END_RCPP
}
// gcdCPP5
Rcpp::List gcdCPP5(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool UTCF);
RcppExport SEXP _resultant_gcdCPP5(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP UTCFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type UTCF(UTCFSEXP);
    rcpp_result_gen = Rcpp::wrap(gcdCPP5(PowersF, CoeffsF, PowersG, CoeffsG, UTCF));
    return rcpp_result_gen;
END_RCPP
}
// gcdCPP6
Rcpp::List gcdCPP6(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool UTCF);
RcppExport SEXP _resultant_gcdCPP6(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP UTCFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type UTCF(UTCFSEXP);
    rcpp_result_gen = Rcpp::wrap(gcdCPP6(PowersF, CoeffsF, PowersG, CoeffsG, UTCF));
    return rcpp_result_gen;
END_RCPP
}
// gcdCPP7
Rcpp::List gcdCPP7(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool UTCF);
RcppExport SEXP _resultant_gcdCPP7(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP UTCFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type UTCF(UTCFSEXP);
    rcpp_result_gen = Rcpp::wrap(gcdCPP7(PowersF, CoeffsF, PowersG, CoeffsG, UTCF));
    return rcpp_result_gen;
END_RCPP
}
// gcdCPP8
Rcpp::List gcdCPP8(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool UTCF);
RcppExport SEXP _resultant_gcdCPP8(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP UTCFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type UTCF(UTCFSEXP);
    rcpp_result_gen = Rcpp::wrap(gcdCPP8(PowersF, CoeffsF, PowersG, CoeffsG, UTCF));
    return rcpp_result_gen;
END_RCPP
}
// gcdCPP9
Rcpp::List gcdCPP9(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool UTCF);
RcppExport SEXP _resultant_gcdCPP9(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP UTCFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type UTCF(UTCFSEXP);
    rcpp_result_gen = Rcpp::wrap(gcdCPP9(PowersF, CoeffsF, PowersG, CoeffsG, UTCF));
    return rcpp_result_gen;
END_RCPP
}
// numberOfRealRootsCPP
int numberOfRealRootsCPP(Rcpp::IntegerVector Powers, Rcpp::CharacterVector Coeffs);
RcppExport SEXP _resultant_numberOfRealRootsCPP(SEXP PowersSEXP, SEXP CoeffsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    rcpp_result_gen = Rcpp::wrap(numberOfRealRootsCPP(Powers, Coeffs));
    return rcpp_result_gen;
END_RCPP
}
// divModCPP1
Rcpp::List divModCPP1(Rcpp::IntegerVector PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerVector PowersG, Rcpp::CharacterVector CoeffsG);
RcppExport SEXP _resultant_divModCPP1(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    rcpp_result_gen = Rcpp::wrap(divModCPP1(PowersF, CoeffsF, PowersG, CoeffsG));
    return rcpp_result_gen;
END_RCPP
}
// integralDivisionCPP1
Rcpp::List integralDivisionCPP1(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool check);
RcppExport SEXP _resultant_integralDivisionCPP1(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(integralDivisionCPP1(PowersF, CoeffsF, PowersG, CoeffsG, check));
    return rcpp_result_gen;
END_RCPP
}
// integralDivisionCPP2
Rcpp::List integralDivisionCPP2(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool check);
RcppExport SEXP _resultant_integralDivisionCPP2(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(integralDivisionCPP2(PowersF, CoeffsF, PowersG, CoeffsG, check));
    return rcpp_result_gen;
END_RCPP
}
// integralDivisionCPP3
Rcpp::List integralDivisionCPP3(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool check);
RcppExport SEXP _resultant_integralDivisionCPP3(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(integralDivisionCPP3(PowersF, CoeffsF, PowersG, CoeffsG, check));
    return rcpp_result_gen;
END_RCPP
}
// integralDivisionCPP4
Rcpp::List integralDivisionCPP4(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool check);
RcppExport SEXP _resultant_integralDivisionCPP4(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(integralDivisionCPP4(PowersF, CoeffsF, PowersG, CoeffsG, check));
    return rcpp_result_gen;
END_RCPP
}
// integralDivisionCPP5
Rcpp::List integralDivisionCPP5(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool check);
RcppExport SEXP _resultant_integralDivisionCPP5(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(integralDivisionCPP5(PowersF, CoeffsF, PowersG, CoeffsG, check));
    return rcpp_result_gen;
END_RCPP
}
// integralDivisionCPP6
Rcpp::List integralDivisionCPP6(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool check);
RcppExport SEXP _resultant_integralDivisionCPP6(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(integralDivisionCPP6(PowersF, CoeffsF, PowersG, CoeffsG, check));
    return rcpp_result_gen;
END_RCPP
}
// integralDivisionCPP7
Rcpp::List integralDivisionCPP7(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool check);
RcppExport SEXP _resultant_integralDivisionCPP7(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(integralDivisionCPP7(PowersF, CoeffsF, PowersG, CoeffsG, check));
    return rcpp_result_gen;
END_RCPP
}
// integralDivisionCPP8
Rcpp::List integralDivisionCPP8(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool check);
RcppExport SEXP _resultant_integralDivisionCPP8(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(integralDivisionCPP8(PowersF, CoeffsF, PowersG, CoeffsG, check));
    return rcpp_result_gen;
END_RCPP
}
// integralDivisionCPP9
Rcpp::List integralDivisionCPP9(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool check);
RcppExport SEXP _resultant_integralDivisionCPP9(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(integralDivisionCPP9(PowersF, CoeffsF, PowersG, CoeffsG, check));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_resultant_resultantCPP1", (DL_FUNC) &_resultant_resultantCPP1, 4},
    {"_resultant_resultantCPP2", (DL_FUNC) &_resultant_resultantCPP2, 5},
    {"_resultant_resultantCPP3", (DL_FUNC) &_resultant_resultantCPP3, 5},
    {"_resultant_resultantCPP4", (DL_FUNC) &_resultant_resultantCPP4, 5},
    {"_resultant_resultantCPP5", (DL_FUNC) &_resultant_resultantCPP5, 5},
    {"_resultant_resultantCPP6", (DL_FUNC) &_resultant_resultantCPP6, 5},
    {"_resultant_resultantCPP7", (DL_FUNC) &_resultant_resultantCPP7, 5},
    {"_resultant_resultantCPP8", (DL_FUNC) &_resultant_resultantCPP8, 5},
    {"_resultant_resultantCPP9", (DL_FUNC) &_resultant_resultantCPP9, 5},
    {"_resultant_subresultantsCPP1", (DL_FUNC) &_resultant_subresultantsCPP1, 4},
    {"_resultant_subresultantsCPP2", (DL_FUNC) &_resultant_subresultantsCPP2, 5},
    {"_resultant_subresultantsCPP3", (DL_FUNC) &_resultant_subresultantsCPP3, 5},
    {"_resultant_subresultantsCPP4", (DL_FUNC) &_resultant_subresultantsCPP4, 5},
    {"_resultant_subresultantsCPP5", (DL_FUNC) &_resultant_subresultantsCPP5, 5},
    {"_resultant_subresultantsCPP6", (DL_FUNC) &_resultant_subresultantsCPP6, 5},
    {"_resultant_subresultantsCPP7", (DL_FUNC) &_resultant_subresultantsCPP7, 5},
    {"_resultant_subresultantsCPP8", (DL_FUNC) &_resultant_subresultantsCPP8, 5},
    {"_resultant_subresultantsCPP9", (DL_FUNC) &_resultant_subresultantsCPP9, 5},
    {"_resultant_gcdCPP1", (DL_FUNC) &_resultant_gcdCPP1, 5},
    {"_resultant_gcdCPP2", (DL_FUNC) &_resultant_gcdCPP2, 5},
    {"_resultant_gcdCPP3", (DL_FUNC) &_resultant_gcdCPP3, 5},
    {"_resultant_gcdCPP4", (DL_FUNC) &_resultant_gcdCPP4, 5},
    {"_resultant_gcdCPP5", (DL_FUNC) &_resultant_gcdCPP5, 5},
    {"_resultant_gcdCPP6", (DL_FUNC) &_resultant_gcdCPP6, 5},
    {"_resultant_gcdCPP7", (DL_FUNC) &_resultant_gcdCPP7, 5},
    {"_resultant_gcdCPP8", (DL_FUNC) &_resultant_gcdCPP8, 5},
    {"_resultant_gcdCPP9", (DL_FUNC) &_resultant_gcdCPP9, 5},
    {"_resultant_numberOfRealRootsCPP", (DL_FUNC) &_resultant_numberOfRealRootsCPP, 2},
    {"_resultant_divModCPP1", (DL_FUNC) &_resultant_divModCPP1, 4},
    {"_resultant_integralDivisionCPP1", (DL_FUNC) &_resultant_integralDivisionCPP1, 5},
    {"_resultant_integralDivisionCPP2", (DL_FUNC) &_resultant_integralDivisionCPP2, 5},
    {"_resultant_integralDivisionCPP3", (DL_FUNC) &_resultant_integralDivisionCPP3, 5},
    {"_resultant_integralDivisionCPP4", (DL_FUNC) &_resultant_integralDivisionCPP4, 5},
    {"_resultant_integralDivisionCPP5", (DL_FUNC) &_resultant_integralDivisionCPP5, 5},
    {"_resultant_integralDivisionCPP6", (DL_FUNC) &_resultant_integralDivisionCPP6, 5},
    {"_resultant_integralDivisionCPP7", (DL_FUNC) &_resultant_integralDivisionCPP7, 5},
    {"_resultant_integralDivisionCPP8", (DL_FUNC) &_resultant_integralDivisionCPP8, 5},
    {"_resultant_integralDivisionCPP9", (DL_FUNC) &_resultant_integralDivisionCPP9, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_resultant(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
