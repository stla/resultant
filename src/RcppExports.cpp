// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// resultantCPP1
Rcpp::CharacterVector resultantCPP1(Rcpp::IntegerVector PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerVector PowersG, Rcpp::CharacterVector CoeffsG);
RcppExport SEXP _resultant_resultantCPP1(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    rcpp_result_gen = Rcpp::wrap(resultantCPP1(PowersF, CoeffsF, PowersG, CoeffsG));
    return rcpp_result_gen;
END_RCPP
}
// resultantCPP2
Rcpp::CharacterVector resultantCPP2(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool permute);
RcppExport SEXP _resultant_resultantCPP2(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permuteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type permute(permuteSEXP);
    rcpp_result_gen = Rcpp::wrap(resultantCPP2(PowersF, CoeffsF, PowersG, CoeffsG, permute));
    return rcpp_result_gen;
END_RCPP
}
// resultantCPP3
Rcpp::List resultantCPP3(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_resultantCPP3(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(resultantCPP3(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// resultantCPP4
Rcpp::List resultantCPP4(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_resultantCPP4(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(resultantCPP4(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// resultantCPP5
Rcpp::List resultantCPP5(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_resultantCPP5(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(resultantCPP5(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// resultantCPP6
Rcpp::List resultantCPP6(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_resultantCPP6(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(resultantCPP6(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// resultantCPP7
Rcpp::List resultantCPP7(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_resultantCPP7(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(resultantCPP7(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// resultantCPP8
Rcpp::List resultantCPP8(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_resultantCPP8(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(resultantCPP8(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// resultantCPP9
Rcpp::List resultantCPP9(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_resultantCPP9(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(resultantCPP9(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// principalSubresultantsCPP1
Rcpp::CharacterVector principalSubresultantsCPP1(Rcpp::IntegerVector PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerVector PowersG, Rcpp::CharacterVector CoeffsG);
RcppExport SEXP _resultant_principalSubresultantsCPP1(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    rcpp_result_gen = Rcpp::wrap(principalSubresultantsCPP1(PowersF, CoeffsF, PowersG, CoeffsG));
    return rcpp_result_gen;
END_RCPP
}
// principalSubresultantsCPP2
Rcpp::List principalSubresultantsCPP2(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool permute);
RcppExport SEXP _resultant_principalSubresultantsCPP2(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permuteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type permute(permuteSEXP);
    rcpp_result_gen = Rcpp::wrap(principalSubresultantsCPP2(PowersF, CoeffsF, PowersG, CoeffsG, permute));
    return rcpp_result_gen;
END_RCPP
}
// principalSubresultantsCPP3
Rcpp::List principalSubresultantsCPP3(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_principalSubresultantsCPP3(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(principalSubresultantsCPP3(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// principalSubresultantsCPP4
Rcpp::List principalSubresultantsCPP4(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_principalSubresultantsCPP4(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(principalSubresultantsCPP4(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// principalSubresultantsCPP5
Rcpp::List principalSubresultantsCPP5(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_principalSubresultantsCPP5(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(principalSubresultantsCPP5(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// principalSubresultantsCPP6
Rcpp::List principalSubresultantsCPP6(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_principalSubresultantsCPP6(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(principalSubresultantsCPP6(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// principalSubresultantsCPP7
Rcpp::List principalSubresultantsCPP7(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_principalSubresultantsCPP7(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(principalSubresultantsCPP7(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// principalSubresultantsCPP8
Rcpp::List principalSubresultantsCPP8(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_principalSubresultantsCPP8(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(principalSubresultantsCPP8(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// principalSubresultantsCPP9
Rcpp::List principalSubresultantsCPP9(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_principalSubresultantsCPP9(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(principalSubresultantsCPP9(PowersF, CoeffsF, PowersG, CoeffsG, permutation));
    return rcpp_result_gen;
END_RCPP
}
// gcdCPP1
Rcpp::List gcdCPP1(Rcpp::IntegerVector PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerVector PowersG, Rcpp::CharacterVector CoeffsG, bool UTCF);
RcppExport SEXP _resultant_gcdCPP1(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP UTCFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type UTCF(UTCFSEXP);
    rcpp_result_gen = Rcpp::wrap(gcdCPP1(PowersF, CoeffsF, PowersG, CoeffsG, UTCF));
    return rcpp_result_gen;
END_RCPP
}
// gcdCPP2
Rcpp::List gcdCPP2(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool UTCF);
RcppExport SEXP _resultant_gcdCPP2(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP UTCFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type UTCF(UTCFSEXP);
    rcpp_result_gen = Rcpp::wrap(gcdCPP2(PowersF, CoeffsF, PowersG, CoeffsG, UTCF));
    return rcpp_result_gen;
END_RCPP
}
// gcdCPP3
Rcpp::List gcdCPP3(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool UTCF);
RcppExport SEXP _resultant_gcdCPP3(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP UTCFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type UTCF(UTCFSEXP);
    rcpp_result_gen = Rcpp::wrap(gcdCPP3(PowersF, CoeffsF, PowersG, CoeffsG, UTCF));
    return rcpp_result_gen;
END_RCPP
}
// gcdCPP4
Rcpp::List gcdCPP4(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool UTCF);
RcppExport SEXP _resultant_gcdCPP4(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP UTCFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type UTCF(UTCFSEXP);
    rcpp_result_gen = Rcpp::wrap(gcdCPP4(PowersF, CoeffsF, PowersG, CoeffsG, UTCF));
    return rcpp_result_gen;
END_RCPP
}
// gcdCPP5
Rcpp::List gcdCPP5(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool UTCF);
RcppExport SEXP _resultant_gcdCPP5(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP UTCFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type UTCF(UTCFSEXP);
    rcpp_result_gen = Rcpp::wrap(gcdCPP5(PowersF, CoeffsF, PowersG, CoeffsG, UTCF));
    return rcpp_result_gen;
END_RCPP
}
// gcdCPP6
Rcpp::List gcdCPP6(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool UTCF);
RcppExport SEXP _resultant_gcdCPP6(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP UTCFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type UTCF(UTCFSEXP);
    rcpp_result_gen = Rcpp::wrap(gcdCPP6(PowersF, CoeffsF, PowersG, CoeffsG, UTCF));
    return rcpp_result_gen;
END_RCPP
}
// gcdCPP7
Rcpp::List gcdCPP7(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool UTCF);
RcppExport SEXP _resultant_gcdCPP7(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP UTCFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type UTCF(UTCFSEXP);
    rcpp_result_gen = Rcpp::wrap(gcdCPP7(PowersF, CoeffsF, PowersG, CoeffsG, UTCF));
    return rcpp_result_gen;
END_RCPP
}
// gcdCPP8
Rcpp::List gcdCPP8(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool UTCF);
RcppExport SEXP _resultant_gcdCPP8(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP UTCFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type UTCF(UTCFSEXP);
    rcpp_result_gen = Rcpp::wrap(gcdCPP8(PowersF, CoeffsF, PowersG, CoeffsG, UTCF));
    return rcpp_result_gen;
END_RCPP
}
// gcdCPP9
Rcpp::List gcdCPP9(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool UTCF);
RcppExport SEXP _resultant_gcdCPP9(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP UTCFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type UTCF(UTCFSEXP);
    rcpp_result_gen = Rcpp::wrap(gcdCPP9(PowersF, CoeffsF, PowersG, CoeffsG, UTCF));
    return rcpp_result_gen;
END_RCPP
}
// numberOfRealRootsCPP
int numberOfRealRootsCPP(Rcpp::IntegerVector Powers, Rcpp::CharacterVector Coeffs);
RcppExport SEXP _resultant_numberOfRealRootsCPP(SEXP PowersSEXP, SEXP CoeffsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    rcpp_result_gen = Rcpp::wrap(numberOfRealRootsCPP(Powers, Coeffs));
    return rcpp_result_gen;
END_RCPP
}
// divModCPP1
Rcpp::List divModCPP1(Rcpp::IntegerVector PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerVector PowersG, Rcpp::CharacterVector CoeffsG);
RcppExport SEXP _resultant_divModCPP1(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    rcpp_result_gen = Rcpp::wrap(divModCPP1(PowersF, CoeffsF, PowersG, CoeffsG));
    return rcpp_result_gen;
END_RCPP
}
// integralDivisionCPP1
Rcpp::List integralDivisionCPP1(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool check);
RcppExport SEXP _resultant_integralDivisionCPP1(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(integralDivisionCPP1(PowersF, CoeffsF, PowersG, CoeffsG, check));
    return rcpp_result_gen;
END_RCPP
}
// integralDivisionCPP2
Rcpp::List integralDivisionCPP2(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool check);
RcppExport SEXP _resultant_integralDivisionCPP2(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(integralDivisionCPP2(PowersF, CoeffsF, PowersG, CoeffsG, check));
    return rcpp_result_gen;
END_RCPP
}
// integralDivisionCPP3
Rcpp::List integralDivisionCPP3(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool check);
RcppExport SEXP _resultant_integralDivisionCPP3(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(integralDivisionCPP3(PowersF, CoeffsF, PowersG, CoeffsG, check));
    return rcpp_result_gen;
END_RCPP
}
// integralDivisionCPP4
Rcpp::List integralDivisionCPP4(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool check);
RcppExport SEXP _resultant_integralDivisionCPP4(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(integralDivisionCPP4(PowersF, CoeffsF, PowersG, CoeffsG, check));
    return rcpp_result_gen;
END_RCPP
}
// integralDivisionCPP5
Rcpp::List integralDivisionCPP5(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool check);
RcppExport SEXP _resultant_integralDivisionCPP5(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(integralDivisionCPP5(PowersF, CoeffsF, PowersG, CoeffsG, check));
    return rcpp_result_gen;
END_RCPP
}
// integralDivisionCPP6
Rcpp::List integralDivisionCPP6(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool check);
RcppExport SEXP _resultant_integralDivisionCPP6(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(integralDivisionCPP6(PowersF, CoeffsF, PowersG, CoeffsG, check));
    return rcpp_result_gen;
END_RCPP
}
// integralDivisionCPP7
Rcpp::List integralDivisionCPP7(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool check);
RcppExport SEXP _resultant_integralDivisionCPP7(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(integralDivisionCPP7(PowersF, CoeffsF, PowersG, CoeffsG, check));
    return rcpp_result_gen;
END_RCPP
}
// integralDivisionCPP8
Rcpp::List integralDivisionCPP8(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool check);
RcppExport SEXP _resultant_integralDivisionCPP8(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(integralDivisionCPP8(PowersF, CoeffsF, PowersG, CoeffsG, check));
    return rcpp_result_gen;
END_RCPP
}
// integralDivisionCPP9
Rcpp::List integralDivisionCPP9(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, bool check);
RcppExport SEXP _resultant_integralDivisionCPP9(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< bool >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(integralDivisionCPP9(PowersF, CoeffsF, PowersG, CoeffsG, check));
    return rcpp_result_gen;
END_RCPP
}
// SturmHabichtCPP1
Rcpp::List SturmHabichtCPP1(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs, int var);
RcppExport SEXP _resultant_SturmHabichtCPP1(SEXP PowersSEXP, SEXP CoeffsSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    Rcpp::traits::input_parameter< int >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(SturmHabichtCPP1(Powers, Coeffs, var));
    return rcpp_result_gen;
END_RCPP
}
// SturmHabichtCPP2
Rcpp::List SturmHabichtCPP2(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs, int var);
RcppExport SEXP _resultant_SturmHabichtCPP2(SEXP PowersSEXP, SEXP CoeffsSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    Rcpp::traits::input_parameter< int >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(SturmHabichtCPP2(Powers, Coeffs, var));
    return rcpp_result_gen;
END_RCPP
}
// SturmHabichtCPP3
Rcpp::List SturmHabichtCPP3(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs, int var);
RcppExport SEXP _resultant_SturmHabichtCPP3(SEXP PowersSEXP, SEXP CoeffsSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    Rcpp::traits::input_parameter< int >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(SturmHabichtCPP3(Powers, Coeffs, var));
    return rcpp_result_gen;
END_RCPP
}
// SturmHabichtCPP4
Rcpp::List SturmHabichtCPP4(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs, int var);
RcppExport SEXP _resultant_SturmHabichtCPP4(SEXP PowersSEXP, SEXP CoeffsSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    Rcpp::traits::input_parameter< int >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(SturmHabichtCPP4(Powers, Coeffs, var));
    return rcpp_result_gen;
END_RCPP
}
// SturmHabichtCPP5
Rcpp::List SturmHabichtCPP5(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs, int var);
RcppExport SEXP _resultant_SturmHabichtCPP5(SEXP PowersSEXP, SEXP CoeffsSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    Rcpp::traits::input_parameter< int >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(SturmHabichtCPP5(Powers, Coeffs, var));
    return rcpp_result_gen;
END_RCPP
}
// SturmHabichtCPP6
Rcpp::List SturmHabichtCPP6(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs, int var);
RcppExport SEXP _resultant_SturmHabichtCPP6(SEXP PowersSEXP, SEXP CoeffsSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    Rcpp::traits::input_parameter< int >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(SturmHabichtCPP6(Powers, Coeffs, var));
    return rcpp_result_gen;
END_RCPP
}
// SturmHabichtCPP7
Rcpp::List SturmHabichtCPP7(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs, int var);
RcppExport SEXP _resultant_SturmHabichtCPP7(SEXP PowersSEXP, SEXP CoeffsSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    Rcpp::traits::input_parameter< int >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(SturmHabichtCPP7(Powers, Coeffs, var));
    return rcpp_result_gen;
END_RCPP
}
// SturmHabichtCPP8
Rcpp::List SturmHabichtCPP8(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs, int var);
RcppExport SEXP _resultant_SturmHabichtCPP8(SEXP PowersSEXP, SEXP CoeffsSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    Rcpp::traits::input_parameter< int >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(SturmHabichtCPP8(Powers, Coeffs, var));
    return rcpp_result_gen;
END_RCPP
}
// SturmHabichtCPP9
Rcpp::List SturmHabichtCPP9(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs, int var);
RcppExport SEXP _resultant_SturmHabichtCPP9(SEXP PowersSEXP, SEXP CoeffsSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    Rcpp::traits::input_parameter< int >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(SturmHabichtCPP9(Powers, Coeffs, var));
    return rcpp_result_gen;
END_RCPP
}
// principalSturmHabichtCPP1
Rcpp::CharacterVector principalSturmHabichtCPP1(Rcpp::IntegerVector Powers, Rcpp::CharacterVector Coeffs);
RcppExport SEXP _resultant_principalSturmHabichtCPP1(SEXP PowersSEXP, SEXP CoeffsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    rcpp_result_gen = Rcpp::wrap(principalSturmHabichtCPP1(Powers, Coeffs));
    return rcpp_result_gen;
END_RCPP
}
// principalSturmHabichtCPP2
Rcpp::List principalSturmHabichtCPP2(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_principalSturmHabichtCPP2(SEXP PowersSEXP, SEXP CoeffsSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(principalSturmHabichtCPP2(Powers, Coeffs, permutation));
    return rcpp_result_gen;
END_RCPP
}
// principalSturmHabichtCPP3
Rcpp::List principalSturmHabichtCPP3(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_principalSturmHabichtCPP3(SEXP PowersSEXP, SEXP CoeffsSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(principalSturmHabichtCPP3(Powers, Coeffs, permutation));
    return rcpp_result_gen;
END_RCPP
}
// principalSturmHabichtCPP4
Rcpp::List principalSturmHabichtCPP4(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_principalSturmHabichtCPP4(SEXP PowersSEXP, SEXP CoeffsSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(principalSturmHabichtCPP4(Powers, Coeffs, permutation));
    return rcpp_result_gen;
END_RCPP
}
// principalSturmHabichtCPP5
Rcpp::List principalSturmHabichtCPP5(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_principalSturmHabichtCPP5(SEXP PowersSEXP, SEXP CoeffsSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(principalSturmHabichtCPP5(Powers, Coeffs, permutation));
    return rcpp_result_gen;
END_RCPP
}
// principalSturmHabichtCPP6
Rcpp::List principalSturmHabichtCPP6(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_principalSturmHabichtCPP6(SEXP PowersSEXP, SEXP CoeffsSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(principalSturmHabichtCPP6(Powers, Coeffs, permutation));
    return rcpp_result_gen;
END_RCPP
}
// principalSturmHabichtCPP7
Rcpp::List principalSturmHabichtCPP7(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_principalSturmHabichtCPP7(SEXP PowersSEXP, SEXP CoeffsSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(principalSturmHabichtCPP7(Powers, Coeffs, permutation));
    return rcpp_result_gen;
END_RCPP
}
// principalSturmHabichtCPP8
Rcpp::List principalSturmHabichtCPP8(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_principalSturmHabichtCPP8(SEXP PowersSEXP, SEXP CoeffsSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(principalSturmHabichtCPP8(Powers, Coeffs, permutation));
    return rcpp_result_gen;
END_RCPP
}
// principalSturmHabichtCPP9
Rcpp::List principalSturmHabichtCPP9(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs, Rcpp::IntegerVector permutation);
RcppExport SEXP _resultant_principalSturmHabichtCPP9(SEXP PowersSEXP, SEXP CoeffsSEXP, SEXP permutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    rcpp_result_gen = Rcpp::wrap(principalSturmHabichtCPP9(Powers, Coeffs, permutation));
    return rcpp_result_gen;
END_RCPP
}
// squareFreeFactorizationCPP1
Rcpp::List squareFreeFactorizationCPP1(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs);
RcppExport SEXP _resultant_squareFreeFactorizationCPP1(SEXP PowersSEXP, SEXP CoeffsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    rcpp_result_gen = Rcpp::wrap(squareFreeFactorizationCPP1(Powers, Coeffs));
    return rcpp_result_gen;
END_RCPP
}
// squareFreeFactorizationCPP2
Rcpp::List squareFreeFactorizationCPP2(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs);
RcppExport SEXP _resultant_squareFreeFactorizationCPP2(SEXP PowersSEXP, SEXP CoeffsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    rcpp_result_gen = Rcpp::wrap(squareFreeFactorizationCPP2(Powers, Coeffs));
    return rcpp_result_gen;
END_RCPP
}
// squareFreeFactorizationCPP3
Rcpp::List squareFreeFactorizationCPP3(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs);
RcppExport SEXP _resultant_squareFreeFactorizationCPP3(SEXP PowersSEXP, SEXP CoeffsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    rcpp_result_gen = Rcpp::wrap(squareFreeFactorizationCPP3(Powers, Coeffs));
    return rcpp_result_gen;
END_RCPP
}
// squareFreeFactorizationCPP4
Rcpp::List squareFreeFactorizationCPP4(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs);
RcppExport SEXP _resultant_squareFreeFactorizationCPP4(SEXP PowersSEXP, SEXP CoeffsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    rcpp_result_gen = Rcpp::wrap(squareFreeFactorizationCPP4(Powers, Coeffs));
    return rcpp_result_gen;
END_RCPP
}
// squareFreeFactorizationCPP5
Rcpp::List squareFreeFactorizationCPP5(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs);
RcppExport SEXP _resultant_squareFreeFactorizationCPP5(SEXP PowersSEXP, SEXP CoeffsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    rcpp_result_gen = Rcpp::wrap(squareFreeFactorizationCPP5(Powers, Coeffs));
    return rcpp_result_gen;
END_RCPP
}
// squareFreeFactorizationCPP6
Rcpp::List squareFreeFactorizationCPP6(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs);
RcppExport SEXP _resultant_squareFreeFactorizationCPP6(SEXP PowersSEXP, SEXP CoeffsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    rcpp_result_gen = Rcpp::wrap(squareFreeFactorizationCPP6(Powers, Coeffs));
    return rcpp_result_gen;
END_RCPP
}
// squareFreeFactorizationCPP7
Rcpp::List squareFreeFactorizationCPP7(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs);
RcppExport SEXP _resultant_squareFreeFactorizationCPP7(SEXP PowersSEXP, SEXP CoeffsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    rcpp_result_gen = Rcpp::wrap(squareFreeFactorizationCPP7(Powers, Coeffs));
    return rcpp_result_gen;
END_RCPP
}
// squareFreeFactorizationCPP8
Rcpp::List squareFreeFactorizationCPP8(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs);
RcppExport SEXP _resultant_squareFreeFactorizationCPP8(SEXP PowersSEXP, SEXP CoeffsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    rcpp_result_gen = Rcpp::wrap(squareFreeFactorizationCPP8(Powers, Coeffs));
    return rcpp_result_gen;
END_RCPP
}
// squareFreeFactorizationCPP9
Rcpp::List squareFreeFactorizationCPP9(Rcpp::IntegerMatrix Powers, Rcpp::CharacterVector Coeffs);
RcppExport SEXP _resultant_squareFreeFactorizationCPP9(SEXP PowersSEXP, SEXP CoeffsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Powers(PowersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Coeffs(CoeffsSEXP);
    rcpp_result_gen = Rcpp::wrap(squareFreeFactorizationCPP9(Powers, Coeffs));
    return rcpp_result_gen;
END_RCPP
}
// subresultantsCPP1
Rcpp::List subresultantsCPP1(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, int var);
RcppExport SEXP _resultant_subresultantsCPP1(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< int >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(subresultantsCPP1(PowersF, CoeffsF, PowersG, CoeffsG, var));
    return rcpp_result_gen;
END_RCPP
}
// subresultantsCPP2
Rcpp::List subresultantsCPP2(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, int var);
RcppExport SEXP _resultant_subresultantsCPP2(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< int >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(subresultantsCPP2(PowersF, CoeffsF, PowersG, CoeffsG, var));
    return rcpp_result_gen;
END_RCPP
}
// subresultantsCPP3
Rcpp::List subresultantsCPP3(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, int var);
RcppExport SEXP _resultant_subresultantsCPP3(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< int >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(subresultantsCPP3(PowersF, CoeffsF, PowersG, CoeffsG, var));
    return rcpp_result_gen;
END_RCPP
}
// subresultantsCPP4
Rcpp::List subresultantsCPP4(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, int var);
RcppExport SEXP _resultant_subresultantsCPP4(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< int >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(subresultantsCPP4(PowersF, CoeffsF, PowersG, CoeffsG, var));
    return rcpp_result_gen;
END_RCPP
}
// subresultantsCPP5
Rcpp::List subresultantsCPP5(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, int var);
RcppExport SEXP _resultant_subresultantsCPP5(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< int >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(subresultantsCPP5(PowersF, CoeffsF, PowersG, CoeffsG, var));
    return rcpp_result_gen;
END_RCPP
}
// subresultantsCPP6
Rcpp::List subresultantsCPP6(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, int var);
RcppExport SEXP _resultant_subresultantsCPP6(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< int >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(subresultantsCPP6(PowersF, CoeffsF, PowersG, CoeffsG, var));
    return rcpp_result_gen;
END_RCPP
}
// subresultantsCPP7
Rcpp::List subresultantsCPP7(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, int var);
RcppExport SEXP _resultant_subresultantsCPP7(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< int >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(subresultantsCPP7(PowersF, CoeffsF, PowersG, CoeffsG, var));
    return rcpp_result_gen;
END_RCPP
}
// subresultantsCPP8
Rcpp::List subresultantsCPP8(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, int var);
RcppExport SEXP _resultant_subresultantsCPP8(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< int >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(subresultantsCPP8(PowersF, CoeffsF, PowersG, CoeffsG, var));
    return rcpp_result_gen;
END_RCPP
}
// subresultantsCPP9
Rcpp::List subresultantsCPP9(Rcpp::IntegerMatrix PowersF, Rcpp::CharacterVector CoeffsF, Rcpp::IntegerMatrix PowersG, Rcpp::CharacterVector CoeffsG, int var);
RcppExport SEXP _resultant_subresultantsCPP9(SEXP PowersFSEXP, SEXP CoeffsFSEXP, SEXP PowersGSEXP, SEXP CoeffsGSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersF(PowersFSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsF(CoeffsFSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PowersG(PowersGSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type CoeffsG(CoeffsGSEXP);
    Rcpp::traits::input_parameter< int >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(subresultantsCPP9(PowersF, CoeffsF, PowersG, CoeffsG, var));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_resultant_resultantCPP1", (DL_FUNC) &_resultant_resultantCPP1, 4},
    {"_resultant_resultantCPP2", (DL_FUNC) &_resultant_resultantCPP2, 5},
    {"_resultant_resultantCPP3", (DL_FUNC) &_resultant_resultantCPP3, 5},
    {"_resultant_resultantCPP4", (DL_FUNC) &_resultant_resultantCPP4, 5},
    {"_resultant_resultantCPP5", (DL_FUNC) &_resultant_resultantCPP5, 5},
    {"_resultant_resultantCPP6", (DL_FUNC) &_resultant_resultantCPP6, 5},
    {"_resultant_resultantCPP7", (DL_FUNC) &_resultant_resultantCPP7, 5},
    {"_resultant_resultantCPP8", (DL_FUNC) &_resultant_resultantCPP8, 5},
    {"_resultant_resultantCPP9", (DL_FUNC) &_resultant_resultantCPP9, 5},
    {"_resultant_principalSubresultantsCPP1", (DL_FUNC) &_resultant_principalSubresultantsCPP1, 4},
    {"_resultant_principalSubresultantsCPP2", (DL_FUNC) &_resultant_principalSubresultantsCPP2, 5},
    {"_resultant_principalSubresultantsCPP3", (DL_FUNC) &_resultant_principalSubresultantsCPP3, 5},
    {"_resultant_principalSubresultantsCPP4", (DL_FUNC) &_resultant_principalSubresultantsCPP4, 5},
    {"_resultant_principalSubresultantsCPP5", (DL_FUNC) &_resultant_principalSubresultantsCPP5, 5},
    {"_resultant_principalSubresultantsCPP6", (DL_FUNC) &_resultant_principalSubresultantsCPP6, 5},
    {"_resultant_principalSubresultantsCPP7", (DL_FUNC) &_resultant_principalSubresultantsCPP7, 5},
    {"_resultant_principalSubresultantsCPP8", (DL_FUNC) &_resultant_principalSubresultantsCPP8, 5},
    {"_resultant_principalSubresultantsCPP9", (DL_FUNC) &_resultant_principalSubresultantsCPP9, 5},
    {"_resultant_gcdCPP1", (DL_FUNC) &_resultant_gcdCPP1, 5},
    {"_resultant_gcdCPP2", (DL_FUNC) &_resultant_gcdCPP2, 5},
    {"_resultant_gcdCPP3", (DL_FUNC) &_resultant_gcdCPP3, 5},
    {"_resultant_gcdCPP4", (DL_FUNC) &_resultant_gcdCPP4, 5},
    {"_resultant_gcdCPP5", (DL_FUNC) &_resultant_gcdCPP5, 5},
    {"_resultant_gcdCPP6", (DL_FUNC) &_resultant_gcdCPP6, 5},
    {"_resultant_gcdCPP7", (DL_FUNC) &_resultant_gcdCPP7, 5},
    {"_resultant_gcdCPP8", (DL_FUNC) &_resultant_gcdCPP8, 5},
    {"_resultant_gcdCPP9", (DL_FUNC) &_resultant_gcdCPP9, 5},
    {"_resultant_numberOfRealRootsCPP", (DL_FUNC) &_resultant_numberOfRealRootsCPP, 2},
    {"_resultant_divModCPP1", (DL_FUNC) &_resultant_divModCPP1, 4},
    {"_resultant_integralDivisionCPP1", (DL_FUNC) &_resultant_integralDivisionCPP1, 5},
    {"_resultant_integralDivisionCPP2", (DL_FUNC) &_resultant_integralDivisionCPP2, 5},
    {"_resultant_integralDivisionCPP3", (DL_FUNC) &_resultant_integralDivisionCPP3, 5},
    {"_resultant_integralDivisionCPP4", (DL_FUNC) &_resultant_integralDivisionCPP4, 5},
    {"_resultant_integralDivisionCPP5", (DL_FUNC) &_resultant_integralDivisionCPP5, 5},
    {"_resultant_integralDivisionCPP6", (DL_FUNC) &_resultant_integralDivisionCPP6, 5},
    {"_resultant_integralDivisionCPP7", (DL_FUNC) &_resultant_integralDivisionCPP7, 5},
    {"_resultant_integralDivisionCPP8", (DL_FUNC) &_resultant_integralDivisionCPP8, 5},
    {"_resultant_integralDivisionCPP9", (DL_FUNC) &_resultant_integralDivisionCPP9, 5},
    {"_resultant_SturmHabichtCPP1", (DL_FUNC) &_resultant_SturmHabichtCPP1, 3},
    {"_resultant_SturmHabichtCPP2", (DL_FUNC) &_resultant_SturmHabichtCPP2, 3},
    {"_resultant_SturmHabichtCPP3", (DL_FUNC) &_resultant_SturmHabichtCPP3, 3},
    {"_resultant_SturmHabichtCPP4", (DL_FUNC) &_resultant_SturmHabichtCPP4, 3},
    {"_resultant_SturmHabichtCPP5", (DL_FUNC) &_resultant_SturmHabichtCPP5, 3},
    {"_resultant_SturmHabichtCPP6", (DL_FUNC) &_resultant_SturmHabichtCPP6, 3},
    {"_resultant_SturmHabichtCPP7", (DL_FUNC) &_resultant_SturmHabichtCPP7, 3},
    {"_resultant_SturmHabichtCPP8", (DL_FUNC) &_resultant_SturmHabichtCPP8, 3},
    {"_resultant_SturmHabichtCPP9", (DL_FUNC) &_resultant_SturmHabichtCPP9, 3},
    {"_resultant_principalSturmHabichtCPP1", (DL_FUNC) &_resultant_principalSturmHabichtCPP1, 2},
    {"_resultant_principalSturmHabichtCPP2", (DL_FUNC) &_resultant_principalSturmHabichtCPP2, 3},
    {"_resultant_principalSturmHabichtCPP3", (DL_FUNC) &_resultant_principalSturmHabichtCPP3, 3},
    {"_resultant_principalSturmHabichtCPP4", (DL_FUNC) &_resultant_principalSturmHabichtCPP4, 3},
    {"_resultant_principalSturmHabichtCPP5", (DL_FUNC) &_resultant_principalSturmHabichtCPP5, 3},
    {"_resultant_principalSturmHabichtCPP6", (DL_FUNC) &_resultant_principalSturmHabichtCPP6, 3},
    {"_resultant_principalSturmHabichtCPP7", (DL_FUNC) &_resultant_principalSturmHabichtCPP7, 3},
    {"_resultant_principalSturmHabichtCPP8", (DL_FUNC) &_resultant_principalSturmHabichtCPP8, 3},
    {"_resultant_principalSturmHabichtCPP9", (DL_FUNC) &_resultant_principalSturmHabichtCPP9, 3},
    {"_resultant_squareFreeFactorizationCPP1", (DL_FUNC) &_resultant_squareFreeFactorizationCPP1, 2},
    {"_resultant_squareFreeFactorizationCPP2", (DL_FUNC) &_resultant_squareFreeFactorizationCPP2, 2},
    {"_resultant_squareFreeFactorizationCPP3", (DL_FUNC) &_resultant_squareFreeFactorizationCPP3, 2},
    {"_resultant_squareFreeFactorizationCPP4", (DL_FUNC) &_resultant_squareFreeFactorizationCPP4, 2},
    {"_resultant_squareFreeFactorizationCPP5", (DL_FUNC) &_resultant_squareFreeFactorizationCPP5, 2},
    {"_resultant_squareFreeFactorizationCPP6", (DL_FUNC) &_resultant_squareFreeFactorizationCPP6, 2},
    {"_resultant_squareFreeFactorizationCPP7", (DL_FUNC) &_resultant_squareFreeFactorizationCPP7, 2},
    {"_resultant_squareFreeFactorizationCPP8", (DL_FUNC) &_resultant_squareFreeFactorizationCPP8, 2},
    {"_resultant_squareFreeFactorizationCPP9", (DL_FUNC) &_resultant_squareFreeFactorizationCPP9, 2},
    {"_resultant_subresultantsCPP1", (DL_FUNC) &_resultant_subresultantsCPP1, 5},
    {"_resultant_subresultantsCPP2", (DL_FUNC) &_resultant_subresultantsCPP2, 5},
    {"_resultant_subresultantsCPP3", (DL_FUNC) &_resultant_subresultantsCPP3, 5},
    {"_resultant_subresultantsCPP4", (DL_FUNC) &_resultant_subresultantsCPP4, 5},
    {"_resultant_subresultantsCPP5", (DL_FUNC) &_resultant_subresultantsCPP5, 5},
    {"_resultant_subresultantsCPP6", (DL_FUNC) &_resultant_subresultantsCPP6, 5},
    {"_resultant_subresultantsCPP7", (DL_FUNC) &_resultant_subresultantsCPP7, 5},
    {"_resultant_subresultantsCPP8", (DL_FUNC) &_resultant_subresultantsCPP8, 5},
    {"_resultant_subresultantsCPP9", (DL_FUNC) &_resultant_subresultantsCPP9, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_resultant(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
